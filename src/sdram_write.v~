module  sdram_write(
    // system   signals
    input                clk         ,
    input                rst_n       ,
    //Communication with    TOP
    input                wr_en       ,
    output   reg         wr_req      ,
    output   reg         flag_wr_end ,
    //Others
    input                ref_req     ,
    input                wr_trig     ,
    //write interfaces
    output  reg [ 3:0]   wr_cmd      ,
    output  reg [11:0]   wr_addr     ,
    output  reg [ 1:0]   bank_addr   

);

//Define    state
localparam      S_IDLE      =   5'b0_0001   ;
localparam      S_REQ       =   5'b0_0010   ;
localparam      S_ACT       =   5'b0_0100   ;
localparam      S_PRE       =   5'b1_0000   ;

reg  [ 4:0]         state                   ;
reg                 flag_wr                 ;
//================================================
reg                 flag_act_end            ;
reg                 flag_pre_end            ;
reg                 sd_row_end              ;
reg  [ 1:0]         burst_cnt               ;
reg  [ 1:0]         burst_cnt_t             ;
reg                 wr_data_end             ;

//--------------------------------------------------
reg     [ 3:0]      act_cnt                 ;
reg     [ 3:0]      break_cnt               ;
reg     [ 6:0]      col_cnt                 ;
//---------------------------------------------------
reg     [11:0]      row_addr                ;
wire    [ 8:0]      col_addr                ;

//=================================================
//******************Main  Code*********************
//==================================================
always  @(posedge clk or negedge rst_n)begin
    if(rst_n==1'b0)begin
        flag_wr <= 0;
    end
    else if(wr_trig==1'b1 && flag_wr == 1'b0)begin
        flag_wr <= 1'b1;
    end
    else if(wr_data_end==1'b1)begin
        flag_wr <= 1'b0;
    end
end

//----------------STATE---------------------------------
always  @(posedge clk or negedge rst_n)begin
    if(rst_n==1'b0)begin
        state   <=  S_IDLE  ;
    end
    else begin
        case(state)
                S_IDLE:
                        if(wr_trig == 1'b1)
                                state   <=  S_REQ   ;
                         else
                                state   <=  S_IDLE  ;
                S_REQ:
                        if(wr_en == 1'b1)
                                state   <=  S_ACT   ;
                        else    
                                state   <=  S_REQ   ;
                S_ACT:
                        if(flag_act_end =1'b1)
                                state   <=  S_WR    ;
                        else    
                                state   <=  S_ACT   ;
                S_WR:
                        if(wr_data_end==1'b1)
                                state   <=  S_PRE   ;
                        else if(ref_req==1'b1&&burst_cnt_t='d3&&flag_wr)
                                state   <=  S_PRE   ;
                        else if(sd_row_end==1'd1&&flag_wr==1'b1)
                                state   <=  S_PRE   ;
                S_PRE:
                        if(ref_req==1'b1&&flag_wr==1'b1)
                                state   <=  S_REQ   ;
                        else if(sd_row_end==1'b1&&flag_wr==1'b1)
                                state   <=  S_ACT   ;
                        else if(wr_data_end == 1'b1)
                                state   <=  S_IDLE  ;
                default:
                                state   <=  S_IDLE  ;
                    
        endcase
    end
end
























endmodule
